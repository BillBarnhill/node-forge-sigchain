// Generated by IcedCoffeeScript 1.8.0-e
(function() {
  var LinkIDGen, PerTeamKeyBox, PerTeamKeyBoxes, PerTeamSecretKeySet, PerTeamSecretKeys, PerUserSecretKeys, SHA256, Team, TeamForge, User, akatch, assert, athrow, constants, createHash, iced, kbpgp, make_esc, make_prng, prng, proofs, unix_time, __iced_k, __iced_k_noop, _ref, _ref1, _ref2;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  make_esc = require('iced-error').make_esc;

  _ref = require('iced-utils').util, athrow = _ref.athrow, akatch = _ref.akatch, unix_time = _ref.unix_time;

  kbpgp = require('kbpgp');

  proofs = require('keybase-proofs');

  constants = proofs.constants;

  _ref1 = require('crypto'), prng = _ref1.prng, createHash = _ref1.createHash;

  make_prng = require('./badprng').make_prng;

  _ref2 = require('./teamlib'), PerUserSecretKeys = _ref2.PerUserSecretKeys, PerTeamSecretKeys = _ref2.PerTeamSecretKeys, PerTeamKeyBoxes = _ref2.PerTeamKeyBoxes, PerTeamSecretKeySet = _ref2.PerTeamSecretKeySet, PerTeamKeyBox = _ref2.PerTeamKeyBox;

  assert = function(condition, msg) {
    if (!condition) {
      throw new Error(msg);
    }
  };

  exports.TeamForge = TeamForge = (function() {
    function TeamForge(_arg) {
      this.chain = _arg.chain;
    }

    TeamForge.prototype.forge = function(cb) {
      var esc, label, link_desc, team, team_desc, user, user_desc, user_label, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "TeamForge::forge");
      this.prng = make_prng();
      this.teams = {};
      this.users = {};
      this.out = {
        log: [],
        teams: {},
        users: {},
        key_owners: {},
        key_pubkeyv2nacls: {},
        team_merkle: {},
        merkle_triples: {},
        expect: this.chain.expect,
        load: this.chain.load
      };
      this._link_id_gen = new LinkIDGen;
      this.default_user_label = "herb";
      (function(_this) {
        return (function(__iced_k) {
          var _i, _k, _keys, _ref3, _results, _while;
          _ref3 = _this.chain.users;
          _keys = (function() {
            var _results1;
            _results1 = [];
            for (_k in _ref3) {
              _results1.push(_k);
            }
            return _results1;
          })();
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _keys.length)) {
              return _break();
            } else {
              user_label = _keys[_i];
              user_desc = _ref3[user_label];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
                  funcname: "TeamForge.forge"
                });
                User.make({
                  forge: _this,
                  label: user_label
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return user = arguments[0];
                    };
                  })(),
                  lineno: 52
                })));
                __iced_deferrals._fulfill();
              })(function() {
                _this.users[user_label] = user;
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
                    funcname: "TeamForge.forge"
                  });
                  user.apply(_this.out, esc(__iced_deferrals.defer({
                    lineno: 54
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  return _next(_this.out.merkle_triples["" + _this.out.users[user_label].uid + "-" + (_this._hash_meta(1000))] = {
                    seqno: 1,
                    id: _this.out.users[user_label].link_map[1]
                  });
                });
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            var _i, _k, _keys, _ref3, _results, _while;
            _ref3 = _this.chain.teams;
            _keys = (function() {
              var _results1;
              _results1 = [];
              for (_k in _ref3) {
                _results1.push(_k);
              }
              return _results1;
            })();
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _keys.length)) {
                return _break();
              } else {
                label = _keys[_i];
                team_desc = _ref3[label];
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
                    funcname: "TeamForge.forge"
                  });
                  Team.make({
                    forge: _this,
                    label: label
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return team = arguments[0];
                      };
                    })(),
                    lineno: 61
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  _this.teams[label] = team;
                  (function(__iced_k) {
                    var _j, _len, _ref4, _results1, _while;
                    _ref4 = team_desc.links;
                    _len = _ref4.length;
                    _j = 0;
                    _results1 = [];
                    _while = function(__iced_k) {
                      var _break, _continue, _next;
                      _break = function() {
                        return __iced_k(_results1);
                      };
                      _continue = function() {
                        return iced.trampoline(function() {
                          ++_j;
                          return _while(__iced_k);
                        });
                      };
                      _next = function(__iced_next_arg) {
                        _results1.push(__iced_next_arg);
                        return _continue();
                      };
                      if (!(_j < _len)) {
                        return _break();
                      } else {
                        link_desc = _ref4[_j];
                        _this.push_log("link team:" + label + " type:" + link_desc.type);
                        user = _this.users[link_desc.signer || _this.default_user_label];
                        assert(user != null, "signing user '" + link_desc.signer + "'");
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
                            funcname: "TeamForge.forge"
                          });
                          team.forge_link({
                            link_desc: link_desc,
                            user: user
                          }, esc(__iced_deferrals.defer({
                            lineno: 68
                          })));
                          __iced_deferrals._fulfill();
                        })(_next);
                      }
                    };
                    _while(__iced_k);
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
                        funcname: "TeamForge.forge"
                      });
                      team.apply(_this.out, esc(__iced_deferrals.defer({
                        lineno: 70
                      })));
                      __iced_deferrals._fulfill();
                    })(_next);
                  });
                });
              }
            };
            _while(__iced_k);
          })(function() {
            return cb(null, _this.out);
          });
        };
      })(this));
    };

    TeamForge.prototype.push_log = function(x) {
      return this.out.log.push(x);
    };

    TeamForge.prototype._hash_meta = function(number) {
      var base, num_str;
      base = "cd".repeat(32);
      num_str = number.toString();
      return base.slice(0, -num_str.length) + num_str;
    };

    TeamForge.prototype._gen_key = function(typ, cb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      switch (typ) {
        case 'eddsa':
          return __iced_k(kbpgp.kb.KeyManager.generate({
            seed: this.prng(32)
          }, cb));
        case 'dh':
          return __iced_k(kbpgp.kb.EncKeyManager.generate({
            seed: this.prng(32)
          }, cb));
        default:
          (function(_this) {
            return (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
                funcname: "TeamForge._gen_key"
              });
              athrow(new Error("unknown key type: " + typ), __iced_deferrals.defer({
                lineno: 95
              }));
              __iced_deferrals._fulfill();
            });
          })(this)(__iced_k);
      }
    };

    return TeamForge;

  })();

  LinkIDGen = (function() {
    function LinkIDGen() {
      this.n = 0;
    }

    LinkIDGen.prototype.next_link_id = function() {
      var base, num_str;
      base = "ef".repeat(32);
      num_str = (this.n++).toString();
      return base.slice(0, -num_str.length) + num_str;
    };

    return LinkIDGen;

  })();

  User = (function() {
    User.make = function(args, cb) {
      var obj;
      obj = new User(args);
      return obj._init(function(err) {
        return cb(err, obj);
      });
    };

    function User(_arg) {
      this.forge = _arg.forge, this.label = _arg.label, this.username = _arg.username, this.eldest_seqno = _arg.eldest_seqno;
    }

    User.prototype._init = function(cb) {
      var esc, km_enc, km_sig, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "TeamForge::User::_init");
      this.username || (this.username = this.label);
      this.eldest_seqno || (this.eldest_seqno = 1);
      this.uid = this._gen_uid({
        label: this.label
      });
      this.keys = {};
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
            funcname: "User._init"
          });
          _this.forge._gen_key('eddsa', esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return km_sig = arguments[0];
              };
            })(),
            lineno: 131
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
              funcname: "User._init"
            });
            _this.forge._gen_key('dh', esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return km_enc = arguments[0];
                };
              })(),
              lineno: 132
            })));
            __iced_deferrals._fulfill();
          })(function() {
            _this.keys["default"] = {
              signing: km_sig,
              encryption: km_enc,
              pubkeyv2nacl: {
                deviceType: "desktop",
                deviceDescription: "home thing",
                deviceID: "fbd762facdfad44709aef63a9a8cdf18",
                base: {
                  provisioning: {
                    sigChainLocation: {
                      seqType: 1,
                      seqno: 1
                    },
                    time: 0,
                    firstAppearedUnverified: 0,
                    prevMerkleRootSigned: {
                      hashMeta: _this.forge._hash_meta(500),
                      seqno: 0
                    },
                    signingKID: ""
                  },
                  eTime: 2005146762000,
                  cTime: 1500570762000,
                  isEldest: true,
                  isSibkey: true,
                  kid: km_sig.get_ekid().toString("hex")
                }
              }
            };
            _this.puk_secrets = {
              1: _this.forge.prng(32).toString('hex')
            };
            return cb(null);
          });
        };
      })(this));
    };

    User.prototype.apply = function(out, cb) {
      var esc, keys, kid, label, puk_kms, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "User::apply");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
            funcname: "User.apply"
          });
          _this.get_puk_kms(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return puk_kms = arguments[0];
              };
            })(),
            lineno: 169
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref3;
          out.users[_this.label] = {
            uid: _this.uid,
            eldest_seqno: _this.eldest_seqno,
            puk_secrets: _this.puk_secrets,
            link_map: {
              1: _this.forge._link_id_gen.next_link_id()
            },
            tmp_puk_enc_kid: puk_kms.encryption.get_ekid().toString('hex')
          };
          _ref3 = _this.keys;
          for (label in _ref3) {
            keys = _ref3[label];
            kid = keys.signing.get_ekid().toString("hex");
            out.key_owners[kid] = _this.label;
            out.key_pubkeyv2nacls[kid] = keys.pubkeyv2nacl;
          }
          return cb(null);
        };
      })(this));
    };

    User.prototype.get_puk_kms = function(cb) {
      var esc, s, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "User::get_puk_kms");
      s = new PerUserSecretKeys({
        seed: new Buffer(this.puk_secrets[1], 'hex'),
        prng: this.forge.prng
      });
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
            funcname: "User.get_puk_kms"
          });
          s.derive({}, esc(__iced_deferrals.defer({
            lineno: 191
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, s.kms);
        };
      })(this));
    };

    User.prototype.uv_str = function() {
      if (this.eldest_seqno !== 1) {
        return "" + this.uid + "%" + eldest_seqno;
      } else {
        return this.uid;
      }
    };

    User.prototype._gen_uid = function(_arg) {
      var h, id, label;
      label = _arg.label;
      h = (SHA256(label)).slice(0, 15);
      id = h.toString('hex') + "19";
      return id;
    };

    return User;

  })();

  Team = (function() {
    Team.make = function(args, cb) {
      var obj;
      obj = new Team(args);
      return obj._init(function(err) {
        return cb(err, obj);
      });
    };

    function Team(_arg) {
      this.forge = _arg.forge, this.label = _arg.label, this.name = _arg.name;
    }

    Team.prototype._init = function(cb) {
      var esc, ptk_secrets, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Team::_init");
      this.name || (this.name = this.label);
      this.id = this._hash_team_id(this.name);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._init"
          });
          PerTeamSecretKeys.make({
            prng: _this.forge.prng
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return ptk_secrets = arguments[0];
              };
            })(),
            lineno: 227
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.ptsks_list = [ptk_secrets];
          _this.links = [];
          return cb(null);
        };
      })(this));
    };

    Team.prototype.apply = function(out, cb) {
      var esc, link, _i, _len, _ref3;
      esc = make_esc(cb, "Team::apply");
      out.teams[this.label] = {
        id: this.id,
        links: (function() {
          var _i, _len, _ref3, _results;
          _ref3 = this.links;
          _results = [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            link = _ref3[_i];
            _results.push(link.for_client);
          }
          return _results;
        }).call(this),
        team_key_box: this.team_key_box,
        tmp_tk_sec: this.ptsks_list[0].seed.toString('hex'),
        tmp_tk_sig_kid: this.ptsks_list[0].kms.signing.get_ekid().toString('hex')
      };
      _ref3 = this.links;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        link = _ref3[_i];
        out.team_merkle[this.id] = {
          seqno: link.for_client.seqno,
          link_id: link.link_id
        };
      }
      return cb(null);
    };

    Team.prototype.forge_link = function(_arg, cb) {
      var link_desc, user;
      link_desc = _arg.link_desc, user = _arg.user;
      switch (link_desc.type) {
        case 'root':
          return this._forge_link_root({
            link_desc: link_desc,
            user: user
          }, cb);
        case 'change_membership':
          return this._forge_link_change_membership({
            link_desc: link_desc,
            user: user
          }, cb);
        case 'invite':
          return this._forge_link_invite({
            link_desc: link_desc,
            user: user
          }, cb);
        case 'leave':
          return this._forge_link_leave({
            link_desc: link_desc,
            user: user
          }, cb);
        default:
          return cb(new Error("unhandled link type: " + link_desc.type), null);
      }
    };

    Team.prototype._forge_link_root = function(_arg, cb) {
      var b4, boxes, d, esc, hash_meta, km_sig, link_desc, link_id, proof, proof_gen_out, ptsk, receiver_puk_kms, receiver_user, sender_puk_kms, seqno, sig_arg, sks, sks_post, user, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref3, _ref4, _ref5;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user;
      esc = make_esc(cb, "_forge_link_root");
      km_sig = user.keys["default"].signing;
      seqno = 1;
      ptsk = this.ptsks_list[0];
      hash_meta = this.forge._hash_meta(1000);
      sig_arg = {
        seqno: seqno,
        user: {
          local: {
            username: user.username,
            uid: user.uid
          }
        },
        team: {
          id: this.id,
          name: this.name,
          members: this._process_members_section(link_desc.members)
        },
        merkle_root: {
          ctime: 1500570000 + 1,
          hash: "ff".repeat(64),
          hash_meta: hash_meta,
          seqno: 8001
        },
        sig_eng: km_sig.make_sig_eng(),
        kms: {
          generation: 1,
          signing: ptsk.kms.signing,
          encryption: ptsk.kms.encryption
        }
      };
      if (((_ref3 = link_desc.corruptors) != null ? _ref3.sig_arg : void 0) != null) {
        sig_arg = (_ref4 = link_desc.corruptors) != null ? _ref4.sig_arg(sig_arg) : void 0;
      }
      proof = new proofs.team.Root(sig_arg);
      if (((_ref5 = link_desc.corruptors) != null ? _ref5.per_team_key : void 0) != null) {
        b4 = proof.set_new_key_section.bind(proof);
        proof.set_new_key_section = function(section) {
          var _ref6;
          b4(section);
          return this.per_team_key = (_ref6 = link_desc.corruptors) != null ? _ref6.per_team_key(section) : void 0;
        };
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._forge_link_root"
          });
          proof.generate_v2(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return proof_gen_out = arguments[0];
              };
            })(),
            lineno: 299
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          link_id = SHA256(proof_gen_out.outer, 'hex');
          _this.links.push({
            proof: proof,
            proof_gen_out: proof_gen_out,
            link_id: link_id,
            for_client: {
              seqno: seqno,
              sig: proof_gen_out.armored,
              payload_json: proof_gen_out.inner.str,
              uid: proof_gen_out.inner.obj.body.key.uid,
              version: 2
            }
          });
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
              funcname: "Team._forge_link_root"
            });
            user.get_puk_kms(esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return sender_puk_kms = arguments[0];
                };
              })(),
              lineno: 314
            })));
            __iced_deferrals._fulfill();
          })(function() {
            receiver_user = _this.forge.users[_this.forge.default_user_label];
            assert(receiver_user != null, "receiver_user");
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
                funcname: "Team._forge_link_root"
              });
              receiver_user.get_puk_kms(esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return receiver_puk_kms = arguments[0];
                  };
                })(),
                lineno: 317
              })));
              __iced_deferrals._fulfill();
            })(function() {
              assert(typeof receiver_puk_kms !== "undefined" && receiver_puk_kms !== null, "receiver_puk_kms");
              d = {};
              d[user.uid] = new PerTeamKeyBox({
                uid: user.uid,
                version: 1,
                per_user_key_seqno: 1,
                km: receiver_puk_kms.encryption
              });
              boxes = new PerTeamKeyBoxes(d);
              sks = new PerTeamSecretKeySet({
                generation: 1,
                boxes: boxes,
                encrypting_km: sender_puk_kms.encryption,
                prng: _this.forge.prng
              });
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
                  funcname: "Team._forge_link_root"
                });
                sks.encrypt({
                  ptsk_new: ptsk
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return sks_post = arguments[0];
                    };
                  })(),
                  lineno: 324
                })));
                __iced_deferrals._fulfill();
              })(function() {
                _this.team_key_box = {
                  nonce: sks.nonce.at(1).buffer().toString('base64'),
                  sender_kid: sender_puk_kms.encryption.get_ekid().toString('hex'),
                  generation: sks_post.generation,
                  ctext: sks.boxes.d[user.uid].box.toString('base64'),
                  per_user_key_seqno: 1
                };
                return cb(null);
              });
            });
          });
        };
      })(this));
    };

    Team.prototype._forge_link_change_membership = function(_arg, cb) {
      var b4, esc, hash_meta, km_sig, link_desc, link_id, prev, proof, proof_gen_out, seqno, sig_arg, user, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref3, _ref4, _ref5, _ref6, _ref7;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user;
      esc = make_esc(cb, "_forge_link_change_membership");
      km_sig = user.keys["default"].signing;
      seqno = this.links.length + 1;
      hash_meta = this.forge._hash_meta(1000);
      prev = this.links[this.links.length - 1].link_id;
      if (((_ref3 = link_desc.corruptors) != null ? _ref3.prev : void 0) != null) {
        prev = (_ref4 = link_desc.corruptors) != null ? _ref4.prev(prev) : void 0;
      }
      sig_arg = {
        seqno: seqno,
        user: {
          local: {
            username: user.username,
            uid: user.uid
          }
        },
        team: {
          id: this.id,
          members: this._process_members_section(link_desc.members)
        },
        merkle_root: {
          ctime: 1500570000 + 1,
          hash: "ff".repeat(64),
          hash_meta: hash_meta,
          seqno: 8001
        },
        prev: prev,
        sig_eng: km_sig.make_sig_eng()
      };
      if (((_ref5 = link_desc.corruptors) != null ? _ref5.sig_arg : void 0) != null) {
        sig_arg = (_ref6 = link_desc.corruptors) != null ? _ref6.sig_arg(sig_arg) : void 0;
      }
      proof = new proofs.team.ChangeMembership(sig_arg);
      if (((_ref7 = link_desc.corruptors) != null ? _ref7.per_team_key : void 0) != null) {
        b4 = proof.set_new_key_section.bind(proof);
        proof.set_new_key_section = function(section) {
          var _ref8;
          b4(section);
          return this.per_team_key = (_ref8 = link_desc.corruptors) != null ? _ref8.per_team_key(section) : void 0;
        };
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._forge_link_change_membership"
          });
          proof.generate_v2(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return proof_gen_out = arguments[0];
              };
            })(),
            lineno: 370
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          link_id = SHA256(proof_gen_out.outer, 'hex');
          _this.links.push({
            proof: proof,
            proof_gen_out: proof_gen_out,
            link_id: link_id,
            for_client: {
              seqno: seqno,
              sig: proof_gen_out.armored,
              payload_json: proof_gen_out.inner.str,
              uid: proof_gen_out.inner.obj.body.key.uid,
              version: 2
            }
          });
          return cb(null);
        };
      })(this));
    };

    Team.prototype._forge_link_invite = function(_arg, cb) {
      var b4, esc, hash_meta, km_sig, link_desc, link_id, prev, proof, proof_gen_out, seqno, sig_arg, user, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref3, _ref4, _ref5, _ref6, _ref7;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user;
      esc = make_esc(cb, "_forge_link_invite");
      km_sig = user.keys["default"].signing;
      seqno = this.links.length + 1;
      hash_meta = this.forge._hash_meta(1000);
      prev = this.links[this.links.length - 1].link_id;
      if (((_ref3 = link_desc.corruptors) != null ? _ref3.prev : void 0) != null) {
        prev = (_ref4 = link_desc.corruptors) != null ? _ref4.prev(prev) : void 0;
      }
      sig_arg = {
        seqno: seqno,
        user: {
          local: {
            username: user.username,
            uid: user.uid
          }
        },
        team: {
          id: this.id,
          invites: link_desc.invites
        },
        merkle_root: {
          ctime: 1500570000 + 1,
          hash: "ff".repeat(64),
          hash_meta: hash_meta,
          seqno: 8001
        },
        prev: prev,
        sig_eng: km_sig.make_sig_eng()
      };
      if (((_ref5 = link_desc.corruptors) != null ? _ref5.sig_arg : void 0) != null) {
        sig_arg = (_ref6 = link_desc.corruptors) != null ? _ref6.sig_arg(sig_arg) : void 0;
      }
      proof = new proofs.team.Invite(sig_arg);
      if (((_ref7 = link_desc.corruptors) != null ? _ref7.per_team_key : void 0) != null) {
        b4 = proof.set_new_key_section.bind(proof);
        proof.set_new_key_section = function(section) {
          var _ref8;
          b4(section);
          return this.per_team_key = (_ref8 = link_desc.corruptors) != null ? _ref8.per_team_key(section) : void 0;
        };
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._forge_link_invite"
          });
          proof.generate_v2(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return proof_gen_out = arguments[0];
              };
            })(),
            lineno: 421
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          link_id = SHA256(proof_gen_out.outer, 'hex');
          _this.links.push({
            proof: proof,
            proof_gen_out: proof_gen_out,
            link_id: link_id,
            for_client: {
              seqno: seqno,
              sig: proof_gen_out.armored,
              payload_json: proof_gen_out.inner.str,
              uid: proof_gen_out.inner.obj.body.key.uid,
              version: 2
            }
          });
          return cb(null);
        };
      })(this));
    };

    Team.prototype._forge_link_leave = function(_arg, cb) {
      var b4, esc, hash_meta, km_sig, link_desc, link_id, prev, proof, proof_gen_out, seqno, sig_arg, user, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref3, _ref4, _ref5, _ref6, _ref7;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      link_desc = _arg.link_desc, user = _arg.user;
      esc = make_esc(cb, "_forge_link_leave");
      km_sig = user.keys["default"].signing;
      seqno = this.links.length + 1;
      hash_meta = this.forge._hash_meta(1000);
      prev = this.links[this.links.length - 1].link_id;
      if (((_ref3 = link_desc.corruptors) != null ? _ref3.prev : void 0) != null) {
        prev = (_ref4 = link_desc.corruptors) != null ? _ref4.prev(prev) : void 0;
      }
      sig_arg = {
        seqno: seqno,
        user: {
          local: {
            username: user.username,
            uid: user.uid
          }
        },
        team: {
          id: this.id
        },
        merkle_root: {
          ctime: 1500570000 + 1,
          hash: "ff".repeat(64),
          hash_meta: hash_meta,
          seqno: 8001
        },
        prev: prev,
        sig_eng: km_sig.make_sig_eng()
      };
      if (((_ref5 = link_desc.corruptors) != null ? _ref5.sig_arg : void 0) != null) {
        sig_arg = (_ref6 = link_desc.corruptors) != null ? _ref6.sig_arg(sig_arg) : void 0;
      }
      proof = new proofs.team.Leave(sig_arg);
      if (((_ref7 = link_desc.corruptors) != null ? _ref7.per_team_key : void 0) != null) {
        b4 = proof.set_new_key_section.bind(proof);
        proof.set_new_key_section = function(section) {
          var _ref8;
          b4(section);
          return this.per_team_key = (_ref8 = link_desc.corruptors) != null ? _ref8.per_team_key(section) : void 0;
        };
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/miles/go/src/github.com/keybase/node-forge-sigchain/src/teamforge.iced",
            funcname: "Team._forge_link_leave"
          });
          proof.generate_v2(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return proof_gen_out = arguments[0];
              };
            })(),
            lineno: 471
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          link_id = SHA256(proof_gen_out.outer, 'hex');
          _this.links.push({
            proof: proof,
            proof_gen_out: proof_gen_out,
            link_id: link_id,
            for_client: {
              seqno: seqno,
              sig: proof_gen_out.armored,
              payload_json: proof_gen_out.inner.str,
              uid: proof_gen_out.inner.obj.body.key.uid,
              version: 2
            }
          });
          return cb(null);
        };
      })(this));
    };

    Team.prototype._process_members_section = function(members_desc) {
      var k, ret, valid;
      ret = {};
      valid = {
        "owner": true,
        "admin": true,
        "writer": true,
        "reader": true,
        "none": true
      };
      for (k in members_desc) {
        assert(valid[k], "invalid members key " + k);
        ret[k] = this._user_label_list_to_uvs(members_desc[k]);
      }
      return ret;
    };

    Team.prototype._user_label_list_to_uvs = function(user_labels) {
      var ret, user, user_label, _i, _len;
      ret = [];
      for (_i = 0, _len = user_labels.length; _i < _len; _i++) {
        user_label = user_labels[_i];
        user = this.forge.users[user_label];
        if (user == null) {
          throw new Error("couldn't find user " + user_label);
        }
        ret.push(user.uv_str());
      }
      return ret;
    };

    Team.prototype._hash_team_id = function(team_name) {
      var h, id;
      h = SHA256(team_name.toLowerCase()).slice(0, 15);
      id = h.toString('hex') + "24";
      return id;
    };

    return Team;

  })();

  SHA256 = function(x, enc) {
    return createHash('SHA256').update(x).digest(enc);
  };

}).call(this);
